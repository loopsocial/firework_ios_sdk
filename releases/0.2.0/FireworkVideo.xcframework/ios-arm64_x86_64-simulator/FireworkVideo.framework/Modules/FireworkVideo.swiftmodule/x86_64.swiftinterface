// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FireworkVideo
import AVFoundation
import AVKit
import AdSupport
import CoreMotion
import CoreTelephony
import Foundation
import SafariServices
import Swift
import UIKit
import WebKit
@_hasMissingDesignatedInitializers public class FireworkVideoEventTracking {
  weak public var videoPlaybackDelegate: FireworkVideo.FireworkVideoPlaybackDelegate?
  @objc deinit
}
public protocol VideoFeedViewControllerDelegate : AnyObject {
  func videoFeedDidLoadFeed(_ viewController: FireworkVideo.VideoFeedViewController)
  func videoFeed(_ viewController: FireworkVideo.VideoFeedViewController, didFailToLoadFeed error: FireworkVideo.VideoFeedError)
}
@objc @_hasMissingDesignatedInitializers public class VideoFeedViewController : UIKit.UIViewController {
  public var viewConfiguration: FireworkVideo.VideoFeedContentConfiguration {
    get
    set
  }
  final public let source: FireworkVideo.VideoFeedContentSource
  public var layout: FireworkVideo.VideoFeedLayout {
    get
    set
  }
  weak public var delegate: FireworkVideo.VideoFeedViewControllerDelegate?
  public init(layout: FireworkVideo.VideoFeedLayout = VideoFeedHorizontalLayout(), source: FireworkVideo.VideoFeedContentSource = .discover)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public enum VideoFeedContentSource {
  case discover
  case channel(channelID: Swift.String)
}
public struct VideoPlayerContentConfiguration : Swift.Equatable {
  public enum VideoCompleteAction : Swift.Equatable {
    case loop
    case advanceToNext
    public static func == (a: FireworkVideo.VideoPlayerContentConfiguration.VideoCompleteAction, b: FireworkVideo.VideoPlayerContentConfiguration.VideoCompleteAction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var videoCompleteAction: FireworkVideo.VideoPlayerContentConfiguration.VideoCompleteAction
  public init()
  public static func == (a: FireworkVideo.VideoPlayerContentConfiguration, b: FireworkVideo.VideoPlayerContentConfiguration) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers public class VideoFeedHorizontalLayout : FireworkVideo.VideoFeedLayout {
  @objc public var itemWidthRatio: CoreGraphics.CGFloat
  @objc public init()
  @objc deinit
}
public enum FireworkVideoSDKError : Foundation.LocalizedError, Swift.CustomStringConvertible {
  case missingAppID
  case missingPublisherID
  case authenticationFailure
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public static func == (a: FireworkVideo.FireworkVideoSDKError, b: FireworkVideo.FireworkVideoSDKError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @objcMembers public class VideoFeedGridLayout : FireworkVideo.VideoFeedLayout {
  @objc public var itemWidthRatio: CoreGraphics.CGFloat
  @objc public var numberOfColumns: Swift.Int
  @objc public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VideoFeedLayout {
  public var itemSpacing: CoreGraphics.CGFloat
  public var contentInsets: UIKit.UIEdgeInsets
  @objc deinit
}
public enum VideoFeedError : Swift.Error {
  case contentSourceError(FireworkVideo.VideoFeedContentSourceError)
  case unknownError(underlyingError: Swift.Error)
}
public enum VideoFeedContentSourceError : Foundation.LocalizedError {
  case channelNotFound(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public protocol FireworkVideoSDKDelegate : AnyObject {
  func fireworkVideoDidLoadSuccessfully()
  func fireworkVideoDidLoadWith(error: FireworkVideo.FireworkVideoSDKError)
}
@_hasMissingDesignatedInitializers public class FireworkVideoSDK {
  public static let version: Swift.String
  public static func initializeSDK(delegate: FireworkVideo.FireworkVideoSDKDelegate? = nil, userID: Swift.String? = nil)
  public static var eventTracking: FireworkVideo.FireworkVideoEventTracking {
    get
  }
  @objc deinit
}
public protocol FireworkVideoPlaybackDelegate : AnyObject {
  func fireworkVideoDidRecordImpression(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidPause(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidResume(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidStartPlaying(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoReachedFirstQuartile(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoReachedMidPoint(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoReachedThirdQuartile(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidFinishPlaying(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidTapCTAButton(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidStartPlayingAd(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
  func fireworkVideoDidFinishPlayingAd(_ videoPlayback: FireworkVideo.VideoPlaybackDetails)
}
public struct VideoFeedContentConfiguration : Swift.Equatable {
  public var backgroundColor: UIKit.UIColor?
  public var itemView: FireworkVideo.VideoFeedItemContentConfiguration
  public var playerView: FireworkVideo.VideoPlayerContentConfiguration
  public init()
  public static func == (a: FireworkVideo.VideoFeedContentConfiguration, b: FireworkVideo.VideoFeedContentConfiguration) -> Swift.Bool
}
public struct VideoFeedItemContentConfiguration : Swift.Equatable {
  public typealias ShadowConfiguration = FireworkVideo.ViewContentConfiguration.ShadowConfiguration
  public var cornerRadius: CoreGraphics.CGFloat
  public var title: FireworkVideo.LabelContentConfiguration
  public var titleLayoutConfiguration: FireworkVideo.VideoFeedItemContentConfiguration.TitleLayoutConfiguration
  public var playIcon: FireworkVideo.VideoFeedItemContentConfiguration.PlayIconConfiguration
  public init()
  public static func == (a: FireworkVideo.VideoFeedItemContentConfiguration, b: FireworkVideo.VideoFeedItemContentConfiguration) -> Swift.Bool
}
extension VideoFeedItemContentConfiguration {
  public enum TitlePosition : Swift.Equatable {
    case stacked, nested
    public static func == (a: FireworkVideo.VideoFeedItemContentConfiguration.TitlePosition, b: FireworkVideo.VideoFeedItemContentConfiguration.TitlePosition) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public struct TitleLayoutConfiguration : Swift.Equatable {
    public var titlePosition: FireworkVideo.VideoFeedItemContentConfiguration.TitlePosition
    public var insets: UIKit.UIEdgeInsets
    public init()
    public static func == (a: FireworkVideo.VideoFeedItemContentConfiguration.TitleLayoutConfiguration, b: FireworkVideo.VideoFeedItemContentConfiguration.TitleLayoutConfiguration) -> Swift.Bool
  }
  public struct PlayIconConfiguration : Swift.Equatable {
    public var isHidden: Swift.Bool
    public var iconWidth: CoreGraphics.CGFloat
    public init()
    public static func == (a: FireworkVideo.VideoFeedItemContentConfiguration.PlayIconConfiguration, b: FireworkVideo.VideoFeedItemContentConfiguration.PlayIconConfiguration) -> Swift.Bool
  }
}
public struct LabelContentConfiguration : Swift.Equatable {
  public var isHidden: Swift.Bool
  public var textColor: UIKit.UIColor
  public var font: UIKit.UIFont
  public var numberOfLines: Swift.Int
  public init()
  public static func == (a: FireworkVideo.LabelContentConfiguration, b: FireworkVideo.LabelContentConfiguration) -> Swift.Bool
}
public struct ViewContentConfiguration {
}
extension ViewContentConfiguration {
  public struct ShadowConfiguration : Swift.Equatable {
    public var opacity: Swift.Float
    public var color: UIKit.UIColor?
    public var offset: CoreGraphics.CGSize
    public init()
    public static func == (a: FireworkVideo.ViewContentConfiguration.ShadowConfiguration, b: FireworkVideo.ViewContentConfiguration.ShadowConfiguration) -> Swift.Bool
  }
}
public typealias EncodedID = Swift.String
public struct VideoPlaybackDetails : Swift.CustomStringConvertible {
  public struct Badge {
    public static let ad: Swift.String
    public static let demo: Swift.String
    public static let featured: Swift.String
  }
  public struct PlayerSize : Swift.CustomStringConvertible {
    public static let zero: FireworkVideo.VideoPlaybackDetails.PlayerSize
    public let width: Swift.Int
    public let height: Swift.Int
    public var description: Swift.String {
      get
    }
  }
  public let videoID: FireworkVideo.EncodedID
  public let duration: Swift.Double
  public let caption: Swift.String?
  public var progress: Swift.Double {
    get
  }
  public let badge: Swift.String?
  public let playerSize: FireworkVideo.VideoPlaybackDetails.PlayerSize
  public let hasCTA: Swift.Bool
  public let ctaActionType: Swift.String?
  public let ctaActionURL: Swift.String?
  public init()
  public var description: Swift.String {
    get
  }
}
extension FireworkVideo.VideoPlayerContentConfiguration.VideoCompleteAction : Swift.Hashable {}
extension FireworkVideo.FireworkVideoSDKError : Swift.Equatable {}
extension FireworkVideo.FireworkVideoSDKError : Swift.Hashable {}
extension FireworkVideo.VideoFeedItemContentConfiguration.TitlePosition : Swift.Hashable {}
